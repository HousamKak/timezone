/* tslint:disable */
/* eslint-disable */
/**
 * OrbiMed Analyst Trade Portal API
 * API for managing trade recommendations and tickets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SecurityResponse } from '../models';
/**
 * SecuritiesApi - axios parameter creator
 * @export
 */
export const SecuritiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all active securities
         * @summary Get Securities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecuritiesApiV1SecuritiesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/securities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific security by ID
         * @summary Get Security
         * @param {number} securityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityApiV1SecuritiesSecurityIdGet: async (securityId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityId' is not null or undefined
            assertParamExists('getSecurityApiV1SecuritiesSecurityIdGet', 'securityId', securityId)
            const localVarPath = `/api/v1/securities/{security_id}`
                .replace(`{${"security_id"}}`, encodeURIComponent(String(securityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search securities by ticker or name
         * @summary Search Securities
         * @param {string} q Search query (ticker or name)
         * @param {number} [limit] Maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSecuritiesApiV1SecuritiesSearchGet: async (q: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('searchSecuritiesApiV1SecuritiesSearchGet', 'q', q)
            const localVarPath = `/api/v1/securities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecuritiesApi - functional programming interface
 * @export
 */
export const SecuritiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecuritiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all active securities
         * @summary Get Securities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecuritiesApiV1SecuritiesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecurityResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecuritiesApiV1SecuritiesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecuritiesApi.getSecuritiesApiV1SecuritiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific security by ID
         * @summary Get Security
         * @param {number} securityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecurityApiV1SecuritiesSecurityIdGet(securityId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecurityApiV1SecuritiesSecurityIdGet(securityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecuritiesApi.getSecurityApiV1SecuritiesSecurityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search securities by ticker or name
         * @summary Search Securities
         * @param {string} q Search query (ticker or name)
         * @param {number} [limit] Maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSecuritiesApiV1SecuritiesSearchGet(q: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecurityResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSecuritiesApiV1SecuritiesSearchGet(q, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecuritiesApi.searchSecuritiesApiV1SecuritiesSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SecuritiesApi - factory interface
 * @export
 */
export const SecuritiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecuritiesApiFp(configuration)
    return {
        /**
         * Get all active securities
         * @summary Get Securities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecuritiesApiV1SecuritiesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SecurityResponse>> {
            return localVarFp.getSecuritiesApiV1SecuritiesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific security by ID
         * @summary Get Security
         * @param {number} securityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityApiV1SecuritiesSecurityIdGet(securityId: number, options?: RawAxiosRequestConfig): AxiosPromise<SecurityResponse> {
            return localVarFp.getSecurityApiV1SecuritiesSecurityIdGet(securityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search securities by ticker or name
         * @summary Search Securities
         * @param {string} q Search query (ticker or name)
         * @param {number} [limit] Maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSecuritiesApiV1SecuritiesSearchGet(q: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<SecurityResponse>> {
            return localVarFp.searchSecuritiesApiV1SecuritiesSearchGet(q, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecuritiesApi - object-oriented interface
 * @export
 * @class SecuritiesApi
 * @extends {BaseAPI}
 */
export class SecuritiesApi extends BaseAPI {
    /**
     * Get all active securities
     * @summary Get Securities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecuritiesApi
     */
    public getSecuritiesApiV1SecuritiesGet(options?: RawAxiosRequestConfig) {
        return SecuritiesApiFp(this.configuration).getSecuritiesApiV1SecuritiesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific security by ID
     * @summary Get Security
     * @param {number} securityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecuritiesApi
     */
    public getSecurityApiV1SecuritiesSecurityIdGet(securityId: number, options?: RawAxiosRequestConfig) {
        return SecuritiesApiFp(this.configuration).getSecurityApiV1SecuritiesSecurityIdGet(securityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search securities by ticker or name
     * @summary Search Securities
     * @param {string} q Search query (ticker or name)
     * @param {number} [limit] Maximum number of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecuritiesApi
     */
    public searchSecuritiesApiV1SecuritiesSearchGet(q: string, limit?: number, options?: RawAxiosRequestConfig) {
        return SecuritiesApiFp(this.configuration).searchSecuritiesApiV1SecuritiesSearchGet(q, limit, options).then((request) => request(this.axios, this.basePath));
    }
}

