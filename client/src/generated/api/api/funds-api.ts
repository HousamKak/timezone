/* tslint:disable */
/* eslint-disable */
/**
 * OrbiMed Analyst Trade Portal API
 * API for managing trade recommendations and tickets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FundResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * FundsApi - axios parameter creator
 * @export
 */
export const FundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a specific fund by ID
         * @summary Get Fund
         * @param {number} fundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundApiV1FundsFundIdGet: async (fundId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fundId' is not null or undefined
            assertParamExists('getFundApiV1FundsFundIdGet', 'fundId', fundId)
            const localVarPath = `/api/v1/funds/{fund_id}`
                .replace(`{${"fund_id"}}`, encodeURIComponent(String(fundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a fund by its code (e.g., \'OPM\', \'GEN\')
         * @summary Get Fund By Code
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundByCodeApiV1FundsCodeCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getFundByCodeApiV1FundsCodeCodeGet', 'code', code)
            const localVarPath = `/api/v1/funds/code/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all active funds
         * @summary Get Funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundsApiV1FundsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/funds/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundsApi - functional programming interface
 * @export
 */
export const FundsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FundsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a specific fund by ID
         * @summary Get Fund
         * @param {number} fundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundApiV1FundsFundIdGet(fundId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundApiV1FundsFundIdGet(fundId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundsApi.getFundApiV1FundsFundIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a fund by its code (e.g., \'OPM\', \'GEN\')
         * @summary Get Fund By Code
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundByCodeApiV1FundsCodeCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundByCodeApiV1FundsCodeCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundsApi.getFundByCodeApiV1FundsCodeCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all active funds
         * @summary Get Funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundsApiV1FundsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FundResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundsApiV1FundsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundsApi.getFundsApiV1FundsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FundsApi - factory interface
 * @export
 */
export const FundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FundsApiFp(configuration)
    return {
        /**
         * Get a specific fund by ID
         * @summary Get Fund
         * @param {number} fundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundApiV1FundsFundIdGet(fundId: number, options?: RawAxiosRequestConfig): AxiosPromise<FundResponse> {
            return localVarFp.getFundApiV1FundsFundIdGet(fundId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a fund by its code (e.g., \'OPM\', \'GEN\')
         * @summary Get Fund By Code
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundByCodeApiV1FundsCodeCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<FundResponse> {
            return localVarFp.getFundByCodeApiV1FundsCodeCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all active funds
         * @summary Get Funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundsApiV1FundsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FundResponse>> {
            return localVarFp.getFundsApiV1FundsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FundsApi - object-oriented interface
 * @export
 * @class FundsApi
 * @extends {BaseAPI}
 */
export class FundsApi extends BaseAPI {
    /**
     * Get a specific fund by ID
     * @summary Get Fund
     * @param {number} fundId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public getFundApiV1FundsFundIdGet(fundId: number, options?: RawAxiosRequestConfig) {
        return FundsApiFp(this.configuration).getFundApiV1FundsFundIdGet(fundId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a fund by its code (e.g., \'OPM\', \'GEN\')
     * @summary Get Fund By Code
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public getFundByCodeApiV1FundsCodeCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return FundsApiFp(this.configuration).getFundByCodeApiV1FundsCodeCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all active funds
     * @summary Get Funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public getFundsApiV1FundsGet(options?: RawAxiosRequestConfig) {
        return FundsApiFp(this.configuration).getFundsApiV1FundsGet(options).then((request) => request(this.axios, this.basePath));
    }
}

