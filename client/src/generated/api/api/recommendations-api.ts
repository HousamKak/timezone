/* tslint:disable */
/* eslint-disable */
/**
 * OrbiMed Analyst Trade Portal API
 * API for managing trade recommendations and tickets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { RecommendationCreate } from '../models';
// @ts-ignore
import type { RecommendationResponse } from '../models';
// @ts-ignore
import type { RecommendationUpdate } from '../models';
/**
 * RecommendationsApi - axios parameter creator
 * @export
 */
export const RecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new trade recommendation
         * @summary Create Recommendation
         * @param {RecommendationCreate} recommendationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecommendationApiV1RecommendationsPost: async (recommendationCreate: RecommendationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recommendationCreate' is not null or undefined
            assertParamExists('createRecommendationApiV1RecommendationsPost', 'recommendationCreate', recommendationCreate)
            const localVarPath = `/api/v1/recommendations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recommendationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a recommendation (only drafts can be deleted)
         * @summary Delete Recommendation
         * @param {number} recommendationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecommendationApiV1RecommendationsRecommendationIdDelete: async (recommendationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recommendationId' is not null or undefined
            assertParamExists('deleteRecommendationApiV1RecommendationsRecommendationIdDelete', 'recommendationId', recommendationId)
            const localVarPath = `/api/v1/recommendations/{recommendation_id}`
                .replace(`{${"recommendation_id"}}`, encodeURIComponent(String(recommendationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all draft recommendations
         * @summary Get Draft Recommendations
         * @param {number | null} [analystId] Filter by analyst ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftRecommendationsApiV1RecommendationsDraftsGet: async (analystId?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/recommendations/drafts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (analystId !== undefined) {
                localVarQueryParameter['analyst_id'] = analystId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific recommendation
         * @summary Get Recommendation
         * @param {number} recommendationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationApiV1RecommendationsRecommendationIdGet: async (recommendationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recommendationId' is not null or undefined
            assertParamExists('getRecommendationApiV1RecommendationsRecommendationIdGet', 'recommendationId', recommendationId)
            const localVarPath = `/api/v1/recommendations/{recommendation_id}`
                .replace(`{${"recommendation_id"}}`, encodeURIComponent(String(recommendationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all recommendations with optional filters
         * @summary Get Recommendations
         * @param {number | null} [analystId] Filter by analyst ID
         * @param {number | null} [securityId] Filter by security ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationsApiV1RecommendationsGet: async (analystId?: number | null, securityId?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/recommendations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (analystId !== undefined) {
                localVarQueryParameter['analyst_id'] = analystId;
            }

            if (securityId !== undefined) {
                localVarQueryParameter['security_id'] = securityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a recommendation (only drafts can be updated)
         * @summary Update Recommendation
         * @param {number} recommendationId 
         * @param {RecommendationUpdate} recommendationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecommendationApiV1RecommendationsRecommendationIdPut: async (recommendationId: number, recommendationUpdate: RecommendationUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recommendationId' is not null or undefined
            assertParamExists('updateRecommendationApiV1RecommendationsRecommendationIdPut', 'recommendationId', recommendationId)
            // verify required parameter 'recommendationUpdate' is not null or undefined
            assertParamExists('updateRecommendationApiV1RecommendationsRecommendationIdPut', 'recommendationUpdate', recommendationUpdate)
            const localVarPath = `/api/v1/recommendations/{recommendation_id}`
                .replace(`{${"recommendation_id"}}`, encodeURIComponent(String(recommendationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recommendationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecommendationsApi - functional programming interface
 * @export
 */
export const RecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new trade recommendation
         * @summary Create Recommendation
         * @param {RecommendationCreate} recommendationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecommendationApiV1RecommendationsPost(recommendationCreate: RecommendationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecommendationApiV1RecommendationsPost(recommendationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.createRecommendationApiV1RecommendationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a recommendation (only drafts can be deleted)
         * @summary Delete Recommendation
         * @param {number} recommendationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecommendationApiV1RecommendationsRecommendationIdDelete(recommendationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecommendationApiV1RecommendationsRecommendationIdDelete(recommendationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.deleteRecommendationApiV1RecommendationsRecommendationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all draft recommendations
         * @summary Get Draft Recommendations
         * @param {number | null} [analystId] Filter by analyst ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDraftRecommendationsApiV1RecommendationsDraftsGet(analystId?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecommendationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDraftRecommendationsApiV1RecommendationsDraftsGet(analystId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.getDraftRecommendationsApiV1RecommendationsDraftsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific recommendation
         * @summary Get Recommendation
         * @param {number} recommendationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendationApiV1RecommendationsRecommendationIdGet(recommendationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendationApiV1RecommendationsRecommendationIdGet(recommendationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.getRecommendationApiV1RecommendationsRecommendationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all recommendations with optional filters
         * @summary Get Recommendations
         * @param {number | null} [analystId] Filter by analyst ID
         * @param {number | null} [securityId] Filter by security ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendationsApiV1RecommendationsGet(analystId?: number | null, securityId?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecommendationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendationsApiV1RecommendationsGet(analystId, securityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.getRecommendationsApiV1RecommendationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a recommendation (only drafts can be updated)
         * @summary Update Recommendation
         * @param {number} recommendationId 
         * @param {RecommendationUpdate} recommendationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecommendationApiV1RecommendationsRecommendationIdPut(recommendationId: number, recommendationUpdate: RecommendationUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecommendationApiV1RecommendationsRecommendationIdPut(recommendationId, recommendationUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.updateRecommendationApiV1RecommendationsRecommendationIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecommendationsApi - factory interface
 * @export
 */
export const RecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecommendationsApiFp(configuration)
    return {
        /**
         * Create a new trade recommendation
         * @summary Create Recommendation
         * @param {RecommendationCreate} recommendationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecommendationApiV1RecommendationsPost(recommendationCreate: RecommendationCreate, options?: RawAxiosRequestConfig): AxiosPromise<RecommendationResponse> {
            return localVarFp.createRecommendationApiV1RecommendationsPost(recommendationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a recommendation (only drafts can be deleted)
         * @summary Delete Recommendation
         * @param {number} recommendationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecommendationApiV1RecommendationsRecommendationIdDelete(recommendationId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteRecommendationApiV1RecommendationsRecommendationIdDelete(recommendationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all draft recommendations
         * @summary Get Draft Recommendations
         * @param {number | null} [analystId] Filter by analyst ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftRecommendationsApiV1RecommendationsDraftsGet(analystId?: number | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<RecommendationResponse>> {
            return localVarFp.getDraftRecommendationsApiV1RecommendationsDraftsGet(analystId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific recommendation
         * @summary Get Recommendation
         * @param {number} recommendationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationApiV1RecommendationsRecommendationIdGet(recommendationId: number, options?: RawAxiosRequestConfig): AxiosPromise<RecommendationResponse> {
            return localVarFp.getRecommendationApiV1RecommendationsRecommendationIdGet(recommendationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all recommendations with optional filters
         * @summary Get Recommendations
         * @param {number | null} [analystId] Filter by analyst ID
         * @param {number | null} [securityId] Filter by security ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationsApiV1RecommendationsGet(analystId?: number | null, securityId?: number | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<RecommendationResponse>> {
            return localVarFp.getRecommendationsApiV1RecommendationsGet(analystId, securityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a recommendation (only drafts can be updated)
         * @summary Update Recommendation
         * @param {number} recommendationId 
         * @param {RecommendationUpdate} recommendationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecommendationApiV1RecommendationsRecommendationIdPut(recommendationId: number, recommendationUpdate: RecommendationUpdate, options?: RawAxiosRequestConfig): AxiosPromise<RecommendationResponse> {
            return localVarFp.updateRecommendationApiV1RecommendationsRecommendationIdPut(recommendationId, recommendationUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecommendationsApi - object-oriented interface
 * @export
 * @class RecommendationsApi
 * @extends {BaseAPI}
 */
export class RecommendationsApi extends BaseAPI {
    /**
     * Create a new trade recommendation
     * @summary Create Recommendation
     * @param {RecommendationCreate} recommendationCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public createRecommendationApiV1RecommendationsPost(recommendationCreate: RecommendationCreate, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).createRecommendationApiV1RecommendationsPost(recommendationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a recommendation (only drafts can be deleted)
     * @summary Delete Recommendation
     * @param {number} recommendationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public deleteRecommendationApiV1RecommendationsRecommendationIdDelete(recommendationId: number, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).deleteRecommendationApiV1RecommendationsRecommendationIdDelete(recommendationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all draft recommendations
     * @summary Get Draft Recommendations
     * @param {number | null} [analystId] Filter by analyst ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getDraftRecommendationsApiV1RecommendationsDraftsGet(analystId?: number | null, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).getDraftRecommendationsApiV1RecommendationsDraftsGet(analystId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific recommendation
     * @summary Get Recommendation
     * @param {number} recommendationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getRecommendationApiV1RecommendationsRecommendationIdGet(recommendationId: number, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).getRecommendationApiV1RecommendationsRecommendationIdGet(recommendationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all recommendations with optional filters
     * @summary Get Recommendations
     * @param {number | null} [analystId] Filter by analyst ID
     * @param {number | null} [securityId] Filter by security ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getRecommendationsApiV1RecommendationsGet(analystId?: number | null, securityId?: number | null, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).getRecommendationsApiV1RecommendationsGet(analystId, securityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a recommendation (only drafts can be updated)
     * @summary Update Recommendation
     * @param {number} recommendationId 
     * @param {RecommendationUpdate} recommendationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public updateRecommendationApiV1RecommendationsRecommendationIdPut(recommendationId: number, recommendationUpdate: RecommendationUpdate, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).updateRecommendationApiV1RecommendationsRecommendationIdPut(recommendationId, recommendationUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

